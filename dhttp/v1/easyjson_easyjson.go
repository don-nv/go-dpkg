// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dhttp

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	http "net/http"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8d5c760DecodeGithubComDonNvGoDpkgDhttpV1(in *jlexer.Lexer, out *clientResponseInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(http.Header)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Body).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d5c760EncodeGithubComDonNvGoDpkgDhttpV1(out *jwriter.Writer, in clientResponseInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Headers {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if v3Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v4, v5 := range v3Value {
						if v4 > 0 {
							out.RawByte(',')
						}
						out.String(string(v5))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Body) != 0 {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Body).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v clientResponseInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d5c760EncodeGithubComDonNvGoDpkgDhttpV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v clientResponseInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d5c760EncodeGithubComDonNvGoDpkgDhttpV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *clientResponseInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d5c760DecodeGithubComDonNvGoDpkgDhttpV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *clientResponseInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d5c760DecodeGithubComDonNvGoDpkgDhttpV1(l, v)
}
func easyjson8d5c760DecodeGithubComDonNvGoDpkgDhttpV11(in *jlexer.Lexer, out *clientRequestInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(http.Header)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 []string
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						in.Delim('[')
						if v6 == nil {
							if !in.IsDelim(']') {
								v6 = make([]string, 0, 4)
							} else {
								v6 = []string{}
							}
						} else {
							v6 = (v6)[:0]
						}
						for !in.IsDelim(']') {
							var v7 string
							v7 = string(in.String())
							v6 = append(v6, v7)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Body).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8d5c760EncodeGithubComDonNvGoDpkgDhttpV11(out *jwriter.Writer, in clientRequestInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Method != "" {
		const prefix string = ",\"method\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Headers {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v9, v10 := range v8Value {
						if v9 > 0 {
							out.RawByte(',')
						}
						out.String(string(v10))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Body) != 0 {
		const prefix string = ",\"body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Body).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v clientRequestInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8d5c760EncodeGithubComDonNvGoDpkgDhttpV11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v clientRequestInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8d5c760EncodeGithubComDonNvGoDpkgDhttpV11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *clientRequestInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8d5c760DecodeGithubComDonNvGoDpkgDhttpV11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *clientRequestInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8d5c760DecodeGithubComDonNvGoDpkgDhttpV11(l, v)
}
